<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Microweb Image Framework</title>
    <style>
        :root {
            --bg-color: #f4f4f9;
            --sidebar-bg: #ffffff;
            --content-bg: #ffffff;
            --text-color: #333333;
            --text-light: #777777;
            --border-color: #eeeeee;
            --shadow-color: rgba(0,0,0,0.08);
        }
        * { box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; margin: 0; background-color: var(--bg-color); color: var(--text-color); }

        .top-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 2em;
            height: 64px;
            background: var(--sidebar-bg);
            border-bottom: 1px solid var(--border-color);
            box-shadow: 0 2px 4px var(--shadow-color);
            position: sticky;
            top: 0;
            z-index: 1000;
        }
        .header-title {
            font-size: 1.2em;
            font-weight: 500;
            text-decoration: none;
            color: var(--text-color);
            display: flex;
            align-items: center;
        }
        .header-nav a {
            text-decoration: none;
            color: var(--text-light);
            font-weight: 500;
            padding: 0.5em 1em;
            border-radius: 8px;
            margin-left: 0.5em;
            transition: background-color 0.2s, color 0.2s;
        }
        .header-nav a:hover { color: var(--text-color); }
        .header-nav a.active { background-color: var(--bg-color); color: var(--text-color); }

        .header-main, .header-selection {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
        }
        .header-selection {
            display: none; /* Initially hidden */
        }
        .header-selection.active {
            display: flex;
        }
        #selection-count {
            font-weight: 500;
            font-size: 1.1em;
        }
        .selection-actions { display: flex; align-items: center; gap: 10px; }

        .header-text-btn {
            background: none;
            border: none;
            color: var(--text-light);
            font-family: inherit;
            font-size: 1em;
            font-weight: 500;
            padding: 0.5em 1em;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.2s, color 0.2s;
        }
        .header-text-btn:hover {
            color: var(--text-color);
            background-color: var(--bg-color);
        }
        .header-text-btn.danger:hover {
            color: #c53030; /* A darker red */
            background-color: #fdf2f2; /* A very light red */
        }
        .conflict-actions {
            display: flex;
            flex-direction: column;
            gap: 1em;
            margin-top: 1.5em;
            padding-top: 1.5em;
            border-top: 1px solid var(--border-color);
            align-items: center;
        }
        .conflict-actions .rename-input-group {
            margin-bottom: 0.5em;
            width: 100%;
        }
.conflict-actions > button {
    background-color: var(--bg-color);
    color: var(--text-color);
    border: 1px solid var(--border-color);
    transition: background-color 0.2s;
    width: 35%;
}
.conflict-actions > button:hover {
    background-color: var(--border-color);
}

        .info-link-container {
            margin-top: 1.5em;
            padding-top: 1em;
            border-top: 1px solid var(--border-color);
            text-align: left;
        }
        .info-link-container p { margin: 0 0 0.5em; }
        .info-link-container a {
            color: #007bff;
            text-decoration: none;
            word-break: break-all;
        }
        .info-link-container a:hover { text-decoration: underline; }

        .fullscreen-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 3000;
            cursor: pointer;
        }
        .fullscreen-overlay.show { display: flex; }

        .fullscreen-header {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            padding: 1.5em;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 3001;
            background: linear-gradient(to bottom, rgba(0,0,0,0.5), transparent);
            pointer-events: none; /* Allow clicks to pass through header to overlay */
        }
        .fullscreen-filename {
            color: white;
            font-size: 1.1em;
            text-shadow: 0 1px 4px rgba(0,0,0,0.7);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            padding-right: 1em;
        }
        .fullscreen-action-btn {
            color: white;
            text-decoration: none;
            opacity: 0.8;
            transition: opacity 0.2s;
            flex-shrink: 0;
            pointer-events: auto; /* Make button clickable */
        }
        .fullscreen-action-btn:hover { opacity: 1; }
        .fullscreen-image-wrapper {
            width: 90vw;
            height: 90vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .fullscreen-image {
            /* Sizing is now handled by JS to ensure correct click area */
            cursor: default;
            max-width: 100%; /* Fallback for large images */
            max-height: 100%; /* Fallback for large images */
        }

        .main-content { padding: 2em; }
        .content-section { display: none; }
        .content-section.active { display: block; }
        .content-section h2 { color: var(--text-color); border-bottom: 2px solid var(--border-color); padding-bottom: 10px; margin-top: 0; }
        
        .upload-container { display: flex; justify-content: center; align-items: center; padding: 4em 0; }
        .upload-label {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            width: 220px;
            height: 220px;
            background: var(--bg-color);
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            border: 2px dashed var(--border-color);
        }
        .upload-label:hover {
            transform: translateY(-3px);
            border-color: var(--text-light);
        }
        .upload-icon { font-size: 100px; font-weight: 200; color: var(--text-light); line-height: 1; }
        .upload-label span { margin-top: 10px; font-weight: 500; color: var(--text-light); font-size: 1.2em; }

        #status { font-weight: 500; min-height: 1.2em; transition: color 0.3s; text-align: center; margin-top: 1.5em; }
        #image-gallery { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 15px; }
        .image-card { background: var(--content-bg); border-radius: 8px; box-shadow: 0 2px 4px var(--shadow-color); overflow: hidden; position: relative; aspect-ratio: 1 / 1; cursor: pointer; }
        .image-card img { width: 100%; height: 100%; object-fit: cover; display: block; transition: transform 0.2s ease-in-out; }
        .image-card.selected { box-shadow: 0 0 0 3px #007bff; }
        .image-card:hover img { transform: scale(1.05); }
        .card-actions { position: absolute; top: 8px; right: 8px; display: flex; align-items: center; background-color: rgba(0, 0, 0, 0.6); border-radius: 14px; padding: 2px; opacity: 0; transition: all 0.2s; z-index: 10; }
        .image-card:hover .card-actions { opacity: 1; }
        .action-btn { display: flex; align-items: center; justify-content: center; color: white; background: none; border: none; cursor: pointer; width: 28px; height: 28px; font-size: 1.2em; border-radius: 50%; }
        .action-btn:hover { background-color: rgba(255,255,255,0.2); }
        .menu-btn { font-weight: bold; }
        .delete-btn { font-weight: normal; }
        .dropdown-menu { position: absolute; top: 40px; right: 8px; background: var(--content-bg); border-radius: 8px; box-shadow: 0 5px 15px rgba(0,0,0,0.2); list-style: none; padding: 5px; margin: 0; z-index: 11; display: none; }
        .dropdown-menu.show { display: block; }
        .dropdown-menu li { padding: 8px 12px; cursor: pointer; border-radius: 5px; white-space: nowrap; }
        .dropdown-menu li:hover { background-color: var(--bg-color); }
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); display: none; justify-content: center; align-items: center; z-index: 4000; }
        .modal-overlay.show { display: flex; }
.modal-content { background: var(--content-bg); padding: 1.5em 2em; border-radius: 12px; box-shadow: 0 5px 20px rgba(0,0,0,0.25); text-align: center; max-width: 400px; width: 90%; }
        .modal-content h3 { margin-top: 0; }
        .modal-content p { margin: 0.5em 0 1.5em; }
.modal-actions { display: flex; justify-content: center; gap: 10px; }
.modal-actions button, .conflict-actions button, .replace-control button { border: none; padding: 10px 20px; border-radius: 8px; cursor: pointer; font-weight: 500; }
.btn-secondary { background-color: var(--border-color); color: var(--text-color); }
.btn-danger { background-color: #dc3545; color: white; }
.btn-primary { background-color: #007bff; color: white; }
        .rename-input-group {
            display: flex;
            margin-bottom: 1.5em;
        }
        .filename-input {
            font-size: 1em;
            padding: 8px;
            border: 1px solid var(--border-color);
            border-right: none;
            border-radius: 8px 0 0 8px;
            width: 100%;
            flex-grow: 1;
        }
        .filename-extension {
            padding: 8px;
            background-color: var(--bg-color);
            border: 1px solid var(--border-color);
            border-left: none;
            border-radius: 0 8px 8px 0;
            color: var(--text-light);
            white-space: nowrap;
        }
        .toast {
            position: fixed;
            bottom: 2em;
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--text-color);
            color: var(--sidebar-bg);
            padding: 1em 1.5em;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            justify-content: space-between;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.3s ease-in-out, visibility 0.3s ease-in-out;
            z-index: 5000;
            min-width: 300px;
            max-width: 90%;
        }
        .toast.show { opacity: 1; visibility: visible; }
        .toast-message { margin-right: 1em; }
        .toast-button { background: none; border: 1px solid var(--text-light); color: var(--sidebar-bg); padding: 0.5em 1em; border-radius: 5px; cursor: pointer; font-weight: 500; white-space: nowrap; }
        .toast-button:hover { background-color: rgba(255,255,255,0.1); }
    </style>
</head>
<body>

    <header class="top-header">
        <div class="header-main">
            <div class="header-title">Microweb Image Framework</div>
            <nav class="header-nav">
                <a href="/gallery" id="nav-gallery" class="<%= activeView === 'gallery' ? 'active' : '' %>">Gallery</a>
                <a href="/upload" id="nav-upload" class="<%= activeView === 'upload' ? 'active' : '' %>">Upload</a>
            </nav>
        </div>
        <div class="header-selection">
            <button class="action-btn" id="selection-close" title="Clear selection">&times;</button>
            <span id="selection-count"></span>
            <div class="selection-actions">
                <button id="select-all-btn" class="header-text-btn" title="Select all images (Ctrl+A)">Select All</button>
                <button class="header-text-btn danger" id="selection-delete" title="Delete selected">Delete</button>
            </div>
        </div>
    </header>

    <main class="main-content">
        <section id="upload-view" class="content-section <%= activeView === 'upload' ? 'active' : '' %>">
            <h2>Upload Image</h2>
            <div class="upload-container">
                <label for="file-input" class="upload-label" title="Click to upload an image">
                    <div class="upload-icon">+</div>
                    <span>Upload</span>
                </label>
                <input type="file" id="file-input" name="myImage" accept="image/*,.zip,.tar,.gz,.7z,application/zip,application/x-tar,application/gzip,application/x-7z-compressed" multiple style="display: none;">
            </div>
            <div id="status"></div>
        </section>

        <section id="gallery-view" class="content-section <%= activeView === 'gallery' ? 'active' : '' %>">
            <h2>Image Gallery</h2>
            <div id="image-gallery">
                <%# This EJS block renders the initial list of images on the server %>
                    <% images.forEach(image => { %> 
                    <div class="image-card"
                         data-id="<%= image.id %>"
                         data-filename="<%= image.displayName %>" 
                         data-link="<%= image.link %>"
                         data-type="<%= image.type %>"
                         data-resolution="<%= image.width %>x<%= image.height %>"
                         >
                        <img src="<%= image.link %>" alt="<%= image.displayName %>">
                        <div class="card-actions">
                            <button class="action-btn menu-btn" data-action="menu" title="More options">⋮</button>
                            <button class="action-btn delete-btn" data-action="delete" title="Delete Image">&times;</button>
                        </div>
                        <ul class="dropdown-menu">
                            <li data-action="select">Select</li>
                            <li data-action="rename">Rename</li>
                            <li data-action="download">Download</li>
                            <li data-action="info">Info</li>
                        </ul>
                    </div>
                <% }); %>
            </div>
        </section>
    </main>

    <div id="fullscreen-overlay" class="fullscreen-overlay">
        <div class="fullscreen-header">
            <span id="fullscreen-filename" class="fullscreen-filename"></span>
            <a id="fullscreen-open-link" href="#" target="_blank" class="fullscreen-action-btn" title="Open image in new tab">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 7V3h4M21 7V3h-4M3 17v4h4M21 17v4h-4"></path></svg>
            </a>
        </div>
        <div class="fullscreen-image-wrapper">
            <img id="fullscreen-image" class="fullscreen-image" src="">
        </div>
    </div>

    <div id="info-modal" class="modal-overlay">
        <div class="modal-content">
            <h3 id="info-filename"></h3>
            <p id="info-details"></p>
            <div class="modal-actions">
                <button class="btn-secondary" onclick="hideInfo()">Close</button>
            </div>
        </div>
    </div>

    <div id="delete-confirm-modal" class="modal-overlay">
        <div class="modal-content">
            <h3>Delete Image</h3>
            <p>Are you sure you want to delete this image?</p>
            <div class="modal-actions">
                <button class="btn-secondary" onclick="hideDeleteConfirm()">Cancel</button>
                <button id="delete-confirm-btn" class="btn-danger">Yes, Delete</button>
            </div>
        </div>
    </div>

    <div id="rename-modal" class="modal-overlay">
        <div class="modal-content">
            <h3>Rename File</h3>
            <div class="rename-input-group">
                <input type="text" id="rename-basename-input" class="filename-input">
                <span id="rename-extension-span" class="filename-extension"></span>
            </div>
            <div class="modal-actions">
                <button class="btn-secondary" onclick="hideRenameModal()">Cancel</button>
                <button id="rename-save-btn" class="btn-primary">Save</button>
            </div>
        </div>
    </div>

    <div id="conflict-modal" class="modal-overlay">
        <div class="modal-content">
            <h3>File Conflict</h3>
            <p>A file named <strong id="conflict-filename"></strong> already exists.</p>
            
            <div class="conflict-actions">
                <div class="rename-input-group">
                    <input type="text" id="conflict-basename-input" class="filename-input" placeholder="Enter new name...">
                    <span id="conflict-extension-span" class="filename-extension"></span>
                </div>
                <button id="conflict-rename-btn" class="btn-primary">Replace</button>
                <button id="conflict-overwrite-btn" class="btn-danger">Overwrite</button>
                <button id="conflict-skip-btn" class="btn-secondary">Skip</button>
            </div>
        </div>
    </div>

    <div id="toast" class="toast">
        <span id="toast-message" class="toast-message"></span>
        <button id="toast-try-again" class="toast-button">Try Again</button>
    </div>

    <script>
        // --- DOM Element References ---

        const fileInput = document.getElementById('file-input');
        const gallery = document.getElementById('image-gallery');
        const statusDiv = document.getElementById('status');
        const navUpload = document.getElementById('nav-upload');
        const navGallery = document.getElementById('nav-gallery');
        const uploadView = document.getElementById('upload-view');
        const galleryView = document.getElementById('gallery-view');
        const headerMain = document.querySelector('.header-main');
        const headerSelection = document.querySelector('.header-selection');
        const selectionCloseBtn = document.getElementById('selection-close');
        const selectionCount = document.getElementById('selection-count');
        const selectionDeleteBtn = document.getElementById('selection-delete');
        const selectAllBtn = document.getElementById('select-all-btn');
        const toast = document.getElementById('toast');
        const toastMessage = document.getElementById('toast-message');
        const toastTryAgainBtn = document.getElementById('toast-try-again');
        const fullscreenOverlay = document.getElementById('fullscreen-overlay');
        const fullscreenImage = document.getElementById('fullscreen-image');
        const fullscreenFilename = document.getElementById('fullscreen-filename');
        const fullscreenOpenLink = document.getElementById('fullscreen-open-link');
        const infoModal = document.getElementById('info-modal');
        const infoFilename = document.getElementById('info-filename');
        const infoDetails = document.getElementById('info-details');
        const deleteConfirmModal = document.getElementById('delete-confirm-modal');
        const deleteConfirmBtn = document.getElementById('delete-confirm-btn');
        const renameModal = document.getElementById('rename-modal');
        const renameBasenameInput = document.getElementById('rename-basename-input');
        const renameSaveBtn = document.getElementById('rename-save-btn');
        const renameExtensionSpan = document.getElementById('rename-extension-span');
        const conflictModal = document.getElementById('conflict-modal');
        const conflictFilename = document.getElementById('conflict-filename');
        const conflictBasenameInput = document.getElementById('conflict-basename-input');
        const conflictExtensionSpan = document.getElementById('conflict-extension-span');
        const conflictRenameBtn = document.getElementById('conflict-rename-btn');
        const conflictOverwriteBtn = document.getElementById('conflict-overwrite-btn');
        const conflictSkipBtn = document.getElementById('conflict-skip-btn');

        // --- State Management ---
        let toastTimeout, conflictQueue = [];
        // Note: Selection state is managed by adding/removing the '.selected' class to/from '.image-card' elements.

        // --- Navigation Logic ---
        function showView(viewToShow, pushState = false) {
            [uploadView, galleryView].forEach(view => view.classList.remove('active'));
            [navUpload, navGallery].forEach(nav => nav.classList.remove('active'));

            if (viewToShow === 'gallery') {
                galleryView.classList.add('active');
                navGallery.classList.add('active');
                if (pushState) history.pushState({ view: 'gallery' }, '', '/gallery');
            } else {
                uploadView.classList.add('active');
                navUpload.classList.add('active');
                if (pushState) history.pushState({ view: 'upload' }, '', '/upload');
            }
        }

        navUpload.addEventListener('click', (e) => { e.preventDefault(); showView('upload', true); });
        navGallery.addEventListener('click', (e) => { e.preventDefault(); showView('gallery', true); });

        // Handle browser back/forward button clicks
        window.addEventListener('popstate', (e) => {
            const view = e.state?.view || (location.pathname === '/upload' ? 'upload' : 'gallery');
            showView(view, false);
        });

        // --- API & Gallery Rendering ---
        async function refreshGallery() {
            try {
                const response = await fetch('/pictures');
                if (!response.ok) throw new Error('Failed to fetch images.');
                
                const images = await response.json();
                gallery.innerHTML = ''; // Clear the gallery

                images.forEach(image => { // The API returns images sorted newest first
                    const card = document.createElement('div');
                    card.className = 'image-card';
                    card.innerHTML = `
                        <img src="${image.link}" alt="${image.displayName}">
                        <div class="card-actions">
                            <button class="action-btn menu-btn" data-action="menu" title="More options">⋮</button>
                            <button class="action-btn delete-btn" data-action="delete" title="Delete Image">&times;</button>
                        </div>
                        <ul class="dropdown-menu">
                            <li data-action="select">Select</li>
                            <li data-action="rename">Rename</li>
                            <li data-action="download">Download</li>
                            <li data-action="info">Info</li>
                        </ul>
                    `;
                    card.dataset.id = image.id;
                    card.dataset.filename = image.displayName;
                    card.dataset.link = image.link;
                    card.dataset.type = image.type;
                    card.dataset.resolution = `${image.width}x${image.height}`;
                    gallery.appendChild(card);
                });
            } catch (error) {
                showToast(error.message);
            }
        }

        // --- User Actions (Upload, Delete) ---

        fileInput.addEventListener('change', (e) => {
            const files = e.target.files;
            if (files.length > 0) {
                uploadFiles(files);
            }
        });

        async function uploadFiles(files) {
            const formData = new FormData();
            for (const file of files) {
                formData.append('myImage', file); // Key must match multer's field name
            }

            statusDiv.textContent = `Uploading ${files.length} file(s)...`;

            try {
                const response = await fetch('/pictures', { method: 'POST', body: formData });
                // Status 207 means partial success (e.g., with conflicts)
                if (!response.ok && response.status !== 207) {
                    const errorResult = await response.json().catch(() => ({ message: 'Upload failed with an unknown error.' }));
                    throw new Error(errorResult.message);
                }

                const result = await response.json();
                statusDiv.textContent = '';
                fileInput.value = ''; // Reset file input

                if (result.successful && result.successful.length > 0) {
                    await refreshGallery();
                }

                if (result.conflicts && result.conflicts.length > 0) {
                    showToast(result.message);
                    handleConflicts(result.conflicts);
                } else {
                    showToast(result.message);
                    showView('gallery', true);
                }
            } catch (error) {
                statusDiv.textContent = '';
                showToast(error.message, true);
                fileInput.value = ''; // Reset on error too
            }
        }

        async function executeDelete(event, card) {
            event.stopPropagation(); // Prevent the card's click event from firing
            const id = card.dataset.id;
            try {
                const response = await fetch(`/pictures`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ ids: [id] })
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Deletion failed.');
                showToast('1 image deleted successfully.');
                await refreshGallery();
                hideDeleteConfirm();
            } catch (error) {
                showToast(error.message);
            }
        }

        // --- UI Feedback (Toasts, Modals, Fullscreen) ---

        function showToast(message, showTryAgain = false) {
            clearTimeout(toastTimeout); // Clear any existing timer

            toastMessage.textContent = message;
            toastTryAgainBtn.style.display = showTryAgain ? 'block' : 'none';
            
            toast.classList.add('show');

            if (!showTryAgain) {
                toastTimeout = setTimeout(() => {
                    toast.classList.remove('show');
                }, 5000);
            }
        }

        toastTryAgainBtn.addEventListener('click', () => {
            toast.classList.remove('show');
            fileInput.click(); // Re-open file dialog
        });

        function handleCardClick(card) {
            const selectionActive = document.querySelectorAll('.image-card.selected').length > 0;
            if (selectionActive) {
                card.classList.toggle('selected');
                updateSelectionUI();
            } else {
                showFullscreen(card);
            }
        }

        function showFullscreen(card) {
            // Set text/links immediately
            fullscreenFilename.textContent = card.dataset.filename;
            fullscreenOpenLink.href = card.dataset.link;

            // Set the src on the actual image element so it starts loading
            fullscreenImage.src = card.dataset.link;

            // Use an in-memory image to calculate dimensions once it's loaded
            const tempImg = new Image();
            tempImg.onload = () => {
                const wrapper = document.querySelector('.fullscreen-image-wrapper');
                const maxWidth = wrapper.clientWidth;
                const maxHeight = wrapper.clientHeight;

                // This ratio determines how much to scale the image to fit the container
                const ratio = Math.min(maxWidth / tempImg.naturalWidth, maxHeight / tempImg.naturalHeight);

                // Apply the scaled dimensions. This will "zoom in" smaller images.
                fullscreenImage.style.width = `${tempImg.naturalWidth * ratio}px`;
                fullscreenImage.style.height = `${tempImg.naturalHeight * ratio}px`;
            };
            tempImg.src = card.dataset.link; // Trigger the load

            fullscreenOverlay.classList.add('show');
        }

        function hideFullscreen() {
            fullscreenOverlay.classList.remove('show');
            fullscreenImage.src = ''; // Clear src to stop video/gif playback
            fullscreenImage.style.width = 'auto';
            fullscreenImage.style.height = 'auto';
            fullscreenFilename.textContent = '';
            fullscreenOpenLink.href = '#';
        }

        fullscreenOverlay.addEventListener('click', (e) => {
            // Hide if the click is on the overlay itself, but not on the image or the action button/link
            if (e.target.closest('.fullscreen-action-btn') || e.target === fullscreenImage) {
                return;
            }
            hideFullscreen();
        });

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && fullscreenOverlay.classList.contains('show')) {
                hideFullscreen();
            }
        });
        // --- Menu, Modal, and Selection Logic ---
        function showMenu(card) {
            hideAllMenus(); // Close other menus
            const menu = card.querySelector('.dropdown-menu');
            menu.classList.add('show');
        }

        function hideAllMenus() {
            document.querySelectorAll('.dropdown-menu.show').forEach(menu => menu.classList.remove('show'));
        }

        function showInfo(card) {
            infoFilename.textContent = card.dataset.filename;
            infoDetails.textContent = `Type: ${card.dataset.type} • Resolution: ${card.dataset.resolution}`;
            infoModal.classList.add('show');
            hideAllMenus();
        }

        function hideInfo() {
            infoModal.classList.remove('show');
        }

        function showRenameModal(card) {
            const oldFilename = card.dataset.filename;

            // Use a regex to reliably separate the basename from a known image extension.
            const extensionRegex = /\.(jpeg|jpg|png|gif|svg)$/i;
            const match = oldFilename.match(extensionRegex);

            let basename;
            let extension;

            if (match) {
                extension = match[0]; // e.g., ".jpg"
                basename = oldFilename.substring(0, oldFilename.length - extension.length);
            } else {
                // If no known extension is found, treat the whole string as the basename.
                extension = '';
                basename = oldFilename;
            }

            // Populate the new input fields
            renameBasenameInput.value = basename;
            renameExtensionSpan.textContent = extension;

            renameModal.classList.add('show');
            hideAllMenus();
            // Set up the save button to call executeRename
            renameSaveBtn.onclick = () => executeRename(card.dataset.id);
            // Store the old filename and original extension on the modal so the 'Enter' key listener and save function can use it
            renameModal.dataset.originalExtension = extension;
        }

        function hideRenameModal() {
            renameModal.classList.remove('show');
        }

        async function executeRename(id) {
            const extension = renameModal.dataset.originalExtension;
            const newBasename = renameBasenameInput.value.trim();
            
            if (!newBasename) {
                showToast('Filename cannot be empty.');
                return;
            }

            const newFilename = newBasename + extension;

            if (newFilename === document.querySelector(`.image-card[data-id="${id}"]`).dataset.filename) {
                hideRenameModal(); // No change, just close modal
                return;
            }

            try {
                const response = await fetch(`/pictures/${id}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ newFilename })
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message || 'Failed to update filename.');
                
                showToast(result.message);
                hideRenameModal();
                await refreshGallery();
            } catch (error) {
                showToast(`Error: ${error.message || 'Could not connect to server.'}`);
            }
        }

        // --- Conflict Resolution Logic ---

        function handleConflicts(conflicts) {
            conflictQueue = conflicts;
            processNextConflict();
        }

        function processNextConflict() {
            if (conflictQueue.length === 0) {
                refreshGallery();
                showView('gallery', true);
                return;
            }
            const conflict = conflictQueue.shift();
            showConflictModal(conflict);
        }

        function showConflictModal(conflict) {
            const { originalFilename, tempPath, existingId } = conflict;
            conflictFilename.textContent = originalFilename;

            const extensionRegex = /\.[^.]+$/;
            const match = originalFilename.match(extensionRegex);
            const extension = match ? match[0] : '';
            const basename = originalFilename.replace(extensionRegex, '');

            conflictBasenameInput.value = `${basename} (1)`;
            conflictExtensionSpan.textContent = extension;

            // Show/hide overwrite button based on whether there's an existing image to overwrite.
            // If existingId is null, it's a duplicate within the same upload batch.
            if (existingId) {
                conflictOverwriteBtn.style.display = 'inline-block';
            } else {
                conflictOverwriteBtn.style.display = 'none';
            }

            conflictModal.classList.add('show');

            // Wire up buttons for the current conflict
            conflictSkipBtn.onclick = () => resolveConflict('skip', { tempPath, originalFilename });
            conflictOverwriteBtn.onclick = () => resolveConflict('overwrite', { tempPath, existingId });
            conflictRenameBtn.onclick = () => {
                const newBasename = conflictBasenameInput.value.trim();
                if (!newBasename) return showToast('New filename cannot be empty.');
                const newFilename = newBasename + extension;
                resolveConflict('rename', { tempPath, newFilename, originalFilename });
            };
        }

        function hideConflictModal() {
            conflictModal.classList.remove('show');
        }

        async function resolveConflict(action, data) {
            try {
                const response = await fetch('/pictures/resolve-conflict', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action, ...data })
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.message);
                showToast(result.message);
                hideConflictModal();
                processNextConflict(); // Move to the next conflict in the queue
            } catch (error) {
                showToast(`Error: ${error.message}`);
            }
        }

        function showDeleteConfirm(card) {
            deleteConfirmModal.classList.add('show');
            // Pass the card to the delete function
            deleteConfirmBtn.onclick = (e) => executeDelete(e, card);
        }

        function hideDeleteConfirm() {
            deleteConfirmModal.classList.remove('show');
            // Reset text to default
            deleteConfirmModal.querySelector('p').textContent = 'Are you sure you want to delete this image?';
        }

        function toggleSelect(card) {
            card.classList.toggle('selected');
            hideAllMenus();
            updateSelectionUI();
        }

        // Updates the top header to show either the main navigation or the selection bar.
        function updateSelectionUI() {
            const allCards = document.querySelectorAll('.image-card');
            const selectedCards = document.querySelectorAll('.image-card.selected');
            const selectionActive = selectedCards.length > 0;

            if (selectionActive) {
                headerMain.style.display = 'none';
                headerSelection.style.display = 'flex';
                selectionCount.textContent = `${selectedCards.length} selected`;

                // Dynamically change the "Select All" button
                if (allCards.length > 0 && selectedCards.length === allCards.length) {
                    selectAllBtn.textContent = 'Unselect All';
                    selectAllBtn.title = 'Unselect all images';
                } else {
                    selectAllBtn.textContent = 'Select All';
                    selectAllBtn.title = 'Select all images (Ctrl+A)';
                }
            } else {
                headerMain.style.display = 'flex';
                headerSelection.style.display = 'none';
            }
        }

        function deselectAll() {
            document.querySelectorAll('.image-card.selected').forEach(card => {
                card.classList.remove('selected');
            });
            updateSelectionUI();
        }

        function selectAll() {
            // Only works if gallery is active
            if (!galleryView.classList.contains('active')) return;
            document.querySelectorAll('.image-card').forEach(card => card.classList.add('selected'));
            updateSelectionUI();
        }

        // Deletes all currently selected images.
        async function deleteSelected() {
            const selectedCards = document.querySelectorAll('.image-card.selected');
            if (selectedCards.length === 0) return;

            const ids = Array.from(selectedCards).map(card => card.dataset.id);
            
            const deleteModalText = deleteConfirmModal.querySelector('p');
            deleteModalText.textContent = `Are you sure you want to delete these ${ids.length} images?`;
            
            showDeleteConfirm({ dataset: {} }); // Show modal without a specific card
            deleteConfirmBtn.onclick = async () => {
                try {
                    const response = await fetch('/pictures', {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ ids })
                    });
                    if (!response.ok) {
                        const errResult = await response.json();
                        throw new Error(errResult.message || 'Bulk delete failed.');
                    }
                    showToast(`${ids.length} image(s) deleted successfully.`);
                    await refreshGallery();
                    deselectAll();
                } catch (error) {
                    showToast(`Error: ${error.message}`);
                } finally {
                    hideDeleteConfirm();
                }
            };
        }

        // --- Global Event Listeners ---

        // Use event delegation for all actions within the gallery
        gallery.addEventListener('click', (e) => {
            const card = e.target.closest('.image-card');
            if (!card) return;

            const action = e.target.dataset.action;

            // If the click was on the image itself (which has no action), or the card background
            if (!action) {
                handleCardClick(card);
                return;
            }

            // Stop propagation to prevent the card click handler from firing
            e.stopPropagation();

            switch (action) {
                case 'menu': showMenu(card); break;
                case 'delete': showDeleteConfirm(card); break;
                case 'select': toggleSelect(card); break;
                case 'rename': showRenameModal(card); break;
                case 'download': downloadImage(card); break;
                case 'info': showInfo(card); break;
            }
        });

        async function downloadImage(card) {
            hideAllMenus();
            const url = card.dataset.link;
            const filename = card.dataset.filename;

            // Modern approach: File System Access API (Chrome, Edge, etc.)
            // This will always show a file explorer pop-up.
            if ('showSaveFilePicker' in window) {
                try {
                    const response = await fetch(url);
                    if (!response.ok) throw new Error('Network response was not ok.');

                    const blob = await response.blob();
                    const mimeType = blob.type || 'application/octet-stream';

                    // Extract extension from filename to suggest in the picker
                    const lastDot = filename.lastIndexOf('.');
                    const fileExtension = (lastDot > 0) ? filename.substring(lastDot) : '';

                    const pickerOpts = {
                        suggestedName: filename,
                        types: [{
                            description: 'Image File', // A more generic description is more reliable
                            accept: { [mimeType]: [fileExtension] }
                        }]
                    };

                    const handle = await window.showSaveFilePicker(pickerOpts);
                    const writable = await handle.createWritable();
                    await writable.write(blob);
                    await writable.close();

                    showToast('Image downloaded successfully.');
                } catch (err) {
                    // This error is thrown if the user cancels the file picker.
                    if (err.name !== 'AbortError') {
                        console.error('Failed to download image:', err);
                        showToast('Failed to download image.', true);
                    }
                }
            } else {
                // Fallback for Firefox, Safari, etc.
                // This behavior depends on the user's browser settings.
                const link = document.createElement('a');
                link.href = url;
                link.download = filename;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }

        // Close menus when clicking anywhere else
        document.addEventListener('click', hideAllMenus);


        // Add event listeners for selection bar
        selectionCloseBtn.addEventListener('click', deselectAll);
        selectionDeleteBtn.addEventListener('click', deleteSelected);
        selectAllBtn.addEventListener('click', () => {
            if (selectAllBtn.textContent === 'Select All') {
                selectAll();
            } else {
                deselectAll();
            }
        });

        // Add event listener for 'Enter' key in rename modal
        renameBasenameInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                renameSaveBtn.click(); // Programmatically click the save button
            }
        });

        // Add event listener for Ctrl+A to select/unselect all
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey && e.key === 'a') {
                // Don't hijack the shortcut if user is typing in an input
                if (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA') {
                    return;
                }
                e.preventDefault();
                
                const allCards = document.querySelectorAll('.image-card');
                const selectedCards = document.querySelectorAll('.image-card.selected');

                if (allCards.length > 0 && selectedCards.length === allCards.length) {
                    deselectAll();
                } else {
                    selectAll();
                }
            }
        });
    </script>

</body>
</html>